package com.zondy.utils;

import java.text.DecimalFormat;
import java.util.ArrayList;

import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSONObject;

public class DotUtils {
	
	@SuppressWarnings("unused")
	private static Logger log = Logger.getLogger(DotUtils.class);
	
	public static void main(String[] args) {
//		String reg = "12728403.229011802,5050236.6528264405;13286126.10917954,5069805.876691976;13393756.84043998,4609929.115851911;12728403.229011802,4541436.832322539";
//		ArrayList<Double> polygonXA = new ArrayList<Double>();
//		ArrayList<Double> polygonYA = new ArrayList<Double>();
//		polygonXA.add(12728403.229011802);
//		polygonXA.add(13286126.10917954);
//		polygonXA.add(13393756.84043998);
//		polygonXA.add(12728403.229011802);
//		polygonYA.add(5050236.6528264405);
//		polygonYA.add(5069805.876691976);
//		polygonYA.add(4609929.115851911);
//		polygonYA.add(4541436.832322539);
//		double px=0.0,py=0.0;
//		px = 12728403.229011802;
//		py = 6050236.6528264405;
//		System.out.println(isPointInPolygon(px, py, polygonXA, polygonYA));
//		System.out.println(checkDotInPolygon(reg, px, py));
		
//		double[] xy = lonLat2Mercator(114.2419, 30.2737);
//		DecimalFormat df = new DecimalFormat("#0.0000");
//		System.out.println("经纬度坐标："+114.2419+","+30.2737);
//		System.out.println("投影后坐标："+df.format(xy[0])+","+df.format(xy[1]));
//		double[] rect = DotUtil.getAround(30.4,114.3, 12000);
//		System.out.println(rect[0]+","+rect[1]+","+rect[2]+","+rect[3]);
//		double dx = rect[3]-rect[1];
//		double dy = rect[2]-rect[0];
//		System.out.println(dx/2+","+dy/2);
//		System.out.println(12000/110000.0);
//		String str ="114.323175152416,31.3221565092525;114.327175152441,31.3220565100388;114.334975151367,31.3220565100388;114.339975151623,31.3235565099359;114.347675151334,31.3256565096119;114.352775151704,31.3256565096119;114.358375151739,31.3248565096068;114.366575151117,31.3210565098076;114.374775151393,31.318356508554;114.378775151419,31.3168565095563;114.385075151346,31.314956509207;114.390175151716,31.3142565093149;114.396375152429,31.3139565098751;114.401675151226,31.3139565098751;114.411975151179,31.3124565099781;114.422475151358,31.310956510081;114.431875151193,31.30965651041;114.428575151959,31.3047565093673;114.425875151604,31.2991565093318;114.422175151918,31.2934565100826;114.417775151441,31.2892565098313;114.413175151636,31.2842565095748;114.410475151282,31.2798565099966;114.408475151719,31.275356509406;114.407075151935,31.2716565097199;114.405675151252,31.2672565092424;114.404475151694,31.2628565096642;114.402775151571,31.2582565098599;114.401175151561,31.2538565093824;114.400575151782,31.2487565099123;114.400475151669,31.24485651;114.4014751519,31.2407565098616;114.407075151935,31.2338565092559;114.412775151184,31.2276565094415;114.417175151662,31.2231565097503;114.422475151358,31.2189565085995;114.42797515128,31.2157565085793;114.434375151321,31.2108565093351;114.439275150565,31.2078565104404;114.445275151952,31.205756509865;114.449575151417,31.2035565100759;114.453475151329,31.2011565100607;114.457075151802,31.1987565100455;114.459075151365,31.1953565097992;114.45957515193,31.190356510442;114.459375151704,31.1871565104218;114.457475151355,31.1843565099544;114.45447515156,31.1812565100472;114.455575151905,31.1769565096827;114.459975150584,31.1741565092154;114.465175151965,31.1708565099814;114.469075151878,31.1679565094009;114.474075151235,31.1640565085894;114.478475151712,31.1616565085742;114.488875151778,31.154656509654;114.493875151135,31.1513565104201;114.497175151269,31.1493565099578;114.501975151299,31.1486565100657;114.506875151442,31.1462565100505;114.510675151242,31.1443565097013;114.514275151714,31.1416565093469;114.518275151739,31.1374565099949;114.52147515176,31.1311565100675;114.52307515177,31.1229565097907;114.524775151893,31.1163565104234;114.52467515178,31.112656509838;114.523675152448,31.1091565085792;114.524075152001,31.1057565092322;114.524775151893,31.102556509212;114.525275151559,31.0977565100809;114.526075151564,31.0922565092592;114.525375151672,31.088556509573;114.523975151888,31.0853565095528;114.52117515142,31.0811565093014;114.517575151847,31.0775565097283;114.514275151714,31.0726565095849;114.51127515192,31.0688565097856;114.509475151684,31.0665565098835;114.504975151993,31.0595565100641;114.502575151977,31.0550565085742;114.500275151176,31.0511565095612;114.498575151952,31.048056509654;114.496375151264,31.0422565093925;114.495775150585,31.0383565085809;114.495675151372,31.034656509794;114.496675151603,31.0301565092035;114.499775152409,31.0256565104116;114.503575151309,31.0234565097232;114.507675151448,31.0215565093739;114.51287515193,31.0194565096979;114.516675151729,31.0172565099088;114.520475152428,31.0150565092204;114.530975151707,31.0078565100741;114.536375152416,31.0052565098329;114.541075151434,31.0014565100336;114.544175151341,30.9974565100084;114.548675151932,30.992756510091;114.553675151289,30.9883565096135;114.557575151201,30.9845565098143;114.56167515134,30.9817565093469;114.566075151817,30.9786565094397;114.568875151385,30.9762565094245;114.572375151744,30.9747565104268;114.576275151657,30.9725565097384;114.579275150552,30.9708565096152;114.583575151815,30.9695565099442;114.58977515163,30.9672565100421;114.595875151331,30.9628565095646;114.59997515057,30.9586565093132;114.604175151721,30.954356509848;114.606275151397,30.9487565098126;114.606975151289,30.9443565093351;114.607975152419,30.941456509654;114.610975151314,30.9385565099729;114.609475151417,30.9276565093418;114.609475151417,30.9193565098514;114.610075151196,30.9134565085775;114.610475151648,30.9081565097806;114.610475151648,30.9008565096219;114.610075151196,30.894356508569;114.607975152419,30.8874565097619;114.606975151289,30.8828565099577;114.605975151957,30.8794565097114;114.604375151947,30.8762565096911;114.601775151706,30.8718565092136;114.599375151691,30.8681565104267;114.596975151675,30.8653565099594;114.593575151429,30.8623565092659;114.590975151188,30.8591565092456;114.588375151846,30.8563565096776;114.587275152401,30.8522565104386;114.58467515126,30.8458565085994;114.583775151142,30.8396565096843;114.583775151142,30.8352565092068;114.583575151815,30.8313565092946;114.581775151579,30.8265565092642;114.578075151893,30.8246565098142;114.573775152428,30.8232565100302;114.570375151282,30.8218565093468;114.566375151257,30.8199565098969;114.561575151227,30.8181565096607;114.553375151849,30.8132565104166;114.548175151367,30.8074565092558;114.542575151331,30.8064565099239;114.534675151393,30.8062565096978;114.525475151785,30.8010565092152;114.518475151966,30.7973565104284;114.510475151915,30.7960565098581;114.503775152435,30.7956565094059;114.499075151618,30.7948565094009;114.494875151367,30.7925565085994;114.491375151906,30.7897565099307;114.488275151999,30.7853565085538;114.487475151994,30.7814565104402;114.487775151434,30.7771565100758;114.489775151896,30.7734565085909;114.490375151675,30.7672565096759;114.494175150575,30.7615565104267;114.495675151372,30.7577565097282;114.49657515059,30.755356509713;114.495275151819,30.7500565100167;114.496975151942,30.7429565100842;114.503175151756,30.7342565092422;114.508775151792,30.728356509767;114.514375151827,30.7215565092743;114.518475151966,30.7135565092237;114.521775151199,30.7039565100623;114.524175151215,30.6942565098885;114.525575151898,30.6874565093958;114.526475151117,30.6807565099155;114.527475151348,30.6789565096792;114.519775151637,30.6813565096944;114.515775151611,30.6823565099256;114.511075151694,30.6839565099357;114.507075151669,30.6852565096067;114.502975152429,30.6867565104031;114.498275151613,30.688656509853;114.492675151577,30.690656509416;114.488775151665,30.6916565096471;114.484675152426,30.6926565098783;114.478875151265,30.6937565093232;114.47327515123,30.6949565097805;114.467775151307,30.6957565097856;114.462575151724,30.6968565092304;114.457375151242,30.6970565085572;114.451775151206,30.6970565085572;114.448175151633,30.6968565092304;114.442575151598,30.6961565093384;114.435975151331,30.6955565095594;114.427875151167,30.6942565098885;114.421475151127,30.6931565104435;114.416375151657,30.6917565097602;114.410775151621,30.6897565092979;114.405475151925,30.6890565094059;114.399375151324,30.6875565104081;114.392875151171,30.6868565096168;114.391275151161,30.690056509637;114.386975151696,30.6927565099914;114.382475152004,30.6944565092152;114.37497515162,30.6956565096725;114.369675151923,30.6964565096775;114.364875151893,30.6973565097957;114.360475151415,30.6951565100065;114.357275151395,30.6915565104334;114.354775151267,30.688656509853;114.350175150563,30.6877565097349;114.344775151653,30.6846565098277;114.341875151972,30.6810565093552;114.328575151326,30.6699565093974;114.32487515164,30.6713565100808;114.322775151964,30.6759565098851;114.318775151938,30.6841565092625;114.303075151277,30.6728565099779;114.298875151925,30.672456510425;114.295375151566,30.6733565096438;114.29297515245,30.67515650988;114.282975151937,30.6856565100589;114.282749008419,30.6856565100589;114.277575151228,30.6856565100589;114.25687515121,30.6782565097872;114.253875151415,30.6748565104402;114.244975151247,30.664256509249;114.241175151447,30.6640565099222;114.235875151751,30.6683565093873;114.235575151412,30.6747565094278;114.2278751517,30.6740565104352;114.221875151213,30.6762565093249;114.214275151614,30.6859565085994;114.208975151918,30.6866565093907;114.201275151307,30.689356509745;114.196175151837,30.6895565099711;114.190375151576,30.6918565098733;114.184275151874,30.6945565093283;114.180775152414,30.6993565093587;114.179575151957,30.7072565092962;114.187775151334,30.7293565099981;114.187775151334,30.7337565095763;114.185875151884,30.741756509627;114.181075151854,30.7538565098159;114.168475151999,30.7632565096505;114.167975151434,30.7712565097012;114.168575151213,30.7758565104048;114.168875151552,30.7811565092018;114.169975151896,30.7855565096793;114.170375151449,30.7885565085741;114.170475151562,30.7922565100589;114.170575151675,30.7959565097451;114.171775151233,30.7998565096573;114.173675151582,30.8038565096826;114.175575151932,30.8082565092608;114.177375151269,30.8112565099543;114.179475151844,30.8168565099897;114.179575151957,30.822256509799;114.168075152446,30.8295565099577;114.166075151984,30.834356509988;114.165975151871,30.8434565085842;114.162975151177,30.8631565092709;114.157775151594,30.8866565097569;114.157675150582,30.8898565097771;114.161575151393,30.8946565098075;114.160075150597,30.8984565096067;114.158575151599,30.9026565098582;114.149375151991,30.9071565104487;114.152475151898,30.9162565099442;114.149875151657,30.923856510442;114.154875151913,30.9298565100303;114.160075150597,30.9385565099729;114.152975151564,30.9478565096945;114.154675151687,30.953656509956;114.160975151614,30.9592565099915;114.169675151557,30.9682565093739;114.17327515113,30.9763565104369;114.174575151701,30.9870565099425;114.163575151856,30.9974565100084;114.161375151167,31.0004565098025;114.158375151373,31.0074565096219;114.15827515126,31.0104565094161;114.151175151328,31.0188565099189;114.149775152443,31.0229565100573;114.149675151431,31.0277565100877;114.15157515178,31.0302565093166;114.159075151265,31.0350565093469;114.164575151188,31.0464565096439;114.167175151429,31.0501565093301;114.170875151115,31.053456508564;114.175875151371,31.0559565095916;114.183475151869,31.0631565096372;114.183809945179,31.0731166216208;114.183875151422,31.0750565096;114.177075151829,31.0983565098599;114.175375151706,31.1097565092575;114.180675151402,31.1167565099763;114.186575151776,31.1191565099915;114.190375151576,31.1197565097705;114.195075150594,31.1219565095595;114.199675151297,31.1248565092407;114.202575151878,31.1277565098211;114.205075152006,31.1296565092711;114.208675151579,31.1334565099696;114.213575151722,31.137056510442;114.217075151182,31.1422565100253;114.221375152446,31.1474565096085;114.22977515115,31.1573565100084;114.232575151618,31.1606565092424;114.234275151741,31.1639565093756;114.235775151638,31.1671565093959;114.237375151648,31.1727565094313;114.238775151432,31.1766565093436;114.239975151889,31.180156509703;114.23967515245,31.1858565098515;114.240275151329,31.1904565096557;114.240175151216,31.1939565100151;114.238375151879,31.1979565100405;114.235975151864,31.2020565092795;114.232675151731,31.2048565097469;114.228075151927,31.205856509978;114.223775151562,31.206456509757;114.219475151198,31.2062565104302;114.214675151167,31.205856509978;114.209375150572,31.2054565104252;114.205875152011,31.2067565100961;114.202475151765,31.2098565100033;114.198875151292,31.2138565100286;114.194275150589,31.2191565097249;114.189775151797,31.2249565099864;114.183875151422,31.2312565099139;114.180675151402,31.2361565100574;114.178875151166,31.2408565099747;114.177475151382,31.247056509789;114.175675151145,31.2517565097064;114.175975150585,31.2573565097418;114.175475151819,31.2614565098802;114.177175151942,31.2660565096845;114.181575152419,31.2687565100388;114.186775152002,31.2698565085843;114.191875150573,31.2716565097199;114.194475151714,31.2735565100692;114.195175151606,31.2779565096473;114.194275150589,31.2840565093487;114.193775151822,31.2877565099342;114.193875151935,31.2918565100725;114.195075150594,31.2955565097587;114.197075151955,31.2983565093268;114.199875152423,31.300756509342;114.202775151204,31.3024565085658;114.206175150551,31.3032565085709;114.21127515182,31.3046565092542;114.215975151738,31.3061565100506;114.21827515164,31.3082565097267;114.220875151881,31.3114565097469;114.22307515167,31.3160565095512;114.223975151788,31.3197565092373;114.227175151809,31.3262565093909;114.229575151824,31.3311565104336;114.231775151613,31.3351565095596;114.234075152414,31.3390565085726;114.237675151987,31.3419565100523;114.242075151565,31.3446565104067;114.245675151139,31.3472565097486;114.250875151621,31.351356509887;114.255975151991,31.3517565094398;114.259875151903,31.3541565085557;114.268275152406,31.3569565099224;114.274475151321,31.3615565097267;114.279275151351,31.3639565097419;114.283575151716,31.36295651041;114.290175151982,31.358156508581;114.296975151576,31.3501565094297;114.300475151935,31.3436565092762;114.305675152418,31.3364565092306;114.311875151333,31.3302565094162;114.313575150557,31.327056509396;114.317475151368,31.3242565098279;114.323175152416,31.3221565092525;";
		//江夏区边界
//		str = "114.585459491371,30.4949442462591;114.582475150572,30.4565565100706;114.581075151687,30.4502565092438;114.580475151908,30.4454565092134;114.580675151235,30.4408565094092;114.581675150567,30.4365565099441;114.582675151697,30.4328565093585;114.584175151594,30.4285565098934;114.585075151712,30.4253565098732;114.58657515161,30.4208565092827;114.587275152401,30.4165565098175;114.587475151728,30.4119565100132;114.586675151723,30.4059565104249;114.585775151604,30.4008565100554;114.583675151928,30.3962565093518;114.583175151363,30.3923565094395;114.583875151255,30.3885565096404;114.585175151826,30.3856565099592;114.585575151378,30.382556510052;114.585175151826,30.3788565085672;114.584275151707,30.3753565100065;114.583275150577,30.3725565104384;114.583475151702,30.3691565092927;114.583575151815,30.3661565085993;114.584775151373,30.3627565092523;114.585975151831,30.3586565100132;114.587175151388,30.3552565097669;114.589275151964,30.3505565098495;114.589279500186,30.3504456153494;114.589475151291,30.3454565085807;114.588875152411,30.3401565097838;114.589075151738,30.3358565094193;114.588275151733,30.3309565092758;114.587675151954,30.3251565099137;114.587375151615,30.3199565094311;114.587575151841,30.3137565096167;114.587875151281,30.3078565092421;114.588275151733,30.3032565094379;114.58817515162,30.2991565092995;114.587575151841,30.2954565096133;114.585375151152,30.291456509588;114.582375151358,30.2876565097888;114.578775151785,30.2843565096555;114.576175152443,30.2822565099794;114.572675151184,30.2791565100723;114.568775151272,30.2757565098259;114.566575150584,30.2725565098057;114.564275151581,30.2692565096723;114.562575150558,30.265756509313;114.5613751519,30.2629565097449;114.55947515245,30.2585565092674;114.557175151648,30.2552565100334;114.554675152419,30.2517565096741;114.551675151726,30.2484565104401;114.548575151819,30.2453565096336;114.54637515113,30.2422565097264;114.544075151228,30.2392565099322;114.542675151444,30.2364565085655;114.541175152446,30.2327565097787;114.541075151434,30.2294565096453;114.540075151203,30.2207565097027;114.539275151198,30.2149565094412;114.537375151748,30.210556509863;114.535975151964,30.2066565099507;114.533275151609,30.2015565095812;114.528875151132,30.1988565092269;114.52467515178,30.1975565095559;114.520875151981,30.1948565092016;114.517475151734,30.1931565099777;114.514675151267,30.1901565092842;114.511975151812,30.1852565100402;114.510775151355,30.1812565100149;114.510475151915,30.1778565097685;114.511075151694,30.1748565099743;114.511375151134,30.1697565096048;114.508575151566,30.1649565095744;114.507175151782,30.1614565092151;114.504975151993,30.1576565094159;114.502475151864,30.1530565096116;114.501375152419,30.1488565093602;114.501175151294,30.1456565093399;114.501675151859,30.1412565097618;114.501875151186,30.1367565100705;114.502875151417,30.1321565093669;114.503875151648,30.1273565093366;114.505575151771,30.1230565098714;114.508475150553,30.1185565092809;114.511075151694,30.1136565100368;114.51317515137,30.1074565093231;114.518275151739,30.1042565093028;114.521675151986,30.1006565097297;114.52497515122,30.0977565100486;114.527175151908,30.0939565093501;114.530575151255,30.08855651044;114.532475151604,30.0824565098393;114.533175150597,30.0778565100351;114.534175151728,30.0732565093315;114.540975151321,30.0677565094091;114.540075151203,30.057456508557;114.541975151552,30.0503565104231;114.543575151562,30.0437565092572;114.544875151233,30.0396565100182;114.544175151341,30.0359565094327;114.541475151886,30.0326565092994;114.538575151306,30.0319565094074;114.535275151173,30.0336565104299;114.532075151152,30.0353565096538;114.529175150572,30.0334565093045;114.530075151589,30.0268565099372;114.530975151707,30.0227565097989;114.531975151938,30.0177565104417;114.532275151378,30.0119565092808;114.531675151599,30.0071565092505;114.529675151137,30.0036565097904;114.527375151235,30.0012565097752;114.524075152001,29.9984565093078;114.521275152433,29.9960565092927;114.5179751514,29.9931565096115;114.513875151262,29.9898565085789;114.511075151694,29.9879565100283;114.506975151555,29.985956509566;114.498675151166,29.9875565095761;114.486875151316,29.9923565096065;114.480775151615,29.9933565098376;114.473375151343,29.9933565098376;114.466975151302,29.9940565097297;114.462175151272,29.9948565097347;114.457575150568,29.997456509976;114.451575151879,30.0018565095542;114.446175151171,30.0043565096824;114.441875151706,30.0060565098056;114.436575152009,30.0068565098106;114.433575151316,30.0078565100418;114.428775151286,30.0097565085924;114.42447515182,30.0112565093888;114.41967515179,30.0131565097381;114.41457515142,30.0152565094141;114.410475151282,30.0181565099946;114.407175151149,30.0209565095626;114.403575151576,30.0234565096908;114.398475151206,30.0255565093669;114.395275151186,30.027056509264;114.390175151716,30.0296565104046;114.384775151906,30.0308565099625;114.377875151301,30.0312565104147;114.373675151949,30.0318565092944;114.367275151908,30.0320565104198;114.363575151323,30.0328565104248;114.355875151611,30.0337565096436;114.347675151334,30.0325565100857;114.341775151859,30.0302565092842;114.334175151361,30.0282565097212;114.328675151439,30.027156509377;114.323775151296,30.0248565085756;114.321175151954,30.0229565100249;114.314375150562,30.012356509733;114.305275151965,30.0095565092656;114.294275151221,30.0066565095846;114.286075151844,30.0048565093483;114.279075151125,30.0047565092353;114.272075151306,30.0046565100216;114.266275151943,30.0048565093483;114.260375151569,30.0047565092353;114.256275151431,30.0037565099034;114.252575151744,30.0034565095643;114.248675151832,30.0014565100013;114.245375151699,29.9990565099861;114.242275151792,29.9975565100891;114.238875152445,29.9953565094006;114.235775151638,29.9943565100688;114.232675151731,29.9935565100637;114.229475151711,29.9934565099507;114.225475151685,29.9953565094006;114.216775151743,30.0005565098832;114.211075151594,30.0042565095694;114.206975150557,30.0059565096925;114.203175151657,30.0081565085823;114.206175150551,30.0174565092032;114.205675151785,30.0233565095778;114.204975151893,30.0277565100553;114.203175151657,30.0322565097465;114.200075151749,30.0369565096639;114.195875150599,30.0414565093551;114.192275151925,30.0442565098224;114.188775151566,30.047956510408;114.185975151997,30.0531565099912;114.186475151663,30.0596565092454;114.188475151226,30.0638565085975;114.190775151128,30.0671565096301;114.192475151252,30.0699565100975;114.193875151935,30.0727565096656;114.195075150594,30.0775565096959;114.195875150599,30.0810565100553;114.195975151611,30.0847565097415;114.195375151832,30.0881565099878;114.19337515137,30.0908565094429;114.189375151345,30.0929565100182;114.1783751506,30.0949565095812;114.175575151932,30.0980565085891;114.170775151901,30.0987565093804;114.167775151208,30.101256510408;114.163775151182,30.104656509755;114.157575151368,30.1098565093382;114.153975151795,30.1142565098157;114.151975151333,30.1176565100621;114.148875151426,30.1207565099693;114.145475151179,30.1256565092134;114.14457515196,30.1290565085604;114.144075151395,30.132956509372;114.144975152412,30.1371565096234;114.146075151857,30.1408565093096;114.14617515197,30.144556509895;114.145775152418,30.1479565092421;114.14327515139,30.1515565097145;114.140175150583,30.1548565098478;114.134375151221,30.1596565098782;114.128875151299,30.1650565096875;114.124275150595,30.1717565100672;114.121675151253,30.1764565099845;114.119375151351,30.1811565099018;114.117375151788,30.1843565099221;114.114775152446,30.1883565099474;114.113375151763,30.1913565097415;114.111575152426,30.1953565097668;114.109875151403,30.1982565094479;114.107875151841,30.2014565085689;114.105275151599,30.2045565093754;114.102575151245,30.2060565092725;114.099575150551,30.207856510408;114.095675152438,30.2072565097297;114.091475151287,30.2059565100587;114.087875151714,30.2039565095964;114.084675151694,30.2047565096015;114.080575151555,30.2071565096167;114.078075151427,30.2102565104232;114.074175152414,30.2126565104384;114.070975150595,30.2136565097702;114.06697515057,30.2142565104485;114.062475151778,30.2142565104485;114.056575151404,30.2108565093028;114.053175151157,30.2086565104131;114.048575151353,30.2069565093906;114.045575151559,30.2079565096217;114.042275151425,30.2101565094108;114.040775152428,30.2140565093231;114.03987515141,30.2176565097955;114.043975152448,30.2187565092404;114.047675151235,30.2188565093534;114.05137515182,30.2204565093635;114.05457515184,30.223456510057;114.057675151748,30.2265565099643;114.061275151321,30.2304565098765;114.066475151803,30.2355565093467;114.068075151814,30.2392565099322;114.070075151377,30.2427565093923;114.073175151284,30.24685651043;114.075975151751,30.2528565100183;114.077775151987,30.2570565093703;114.079575151324,30.2600565100638;114.083975151802,30.2676565096622;114.084675151694,30.2717565098006;114.085675151925,30.275956510052;114.08647515193,30.2798565099642;114.086675151257,30.2850565104469;114.086875150584,30.2896565093518;114.087575151375,30.2945565085959;114.087675150589,30.2977565104148;114.088475150594,30.3022565092067;114.089175151385,30.3069565100233;114.090475151955,30.3108565099356;114.091675152412,30.3156565099659;114.093975151415,30.3223565094463;114.096275151318,30.3273565097027;114.098875151559,30.3329565097382;114.10017515123,30.3368565096504;114.103175151923,30.3412565092286;114.104375150582,30.343356509804;114.106375151943,30.3463565095981;114.109475151851,30.3497565098445;114.112675151871,30.3527565096387;114.117275151675,30.3558565104452;114.121675151253,30.3583565096741;114.125875152404,30.3611565092421;114.129775151417,30.3649565099407;114.133575151216,30.3680565098479;114.13817515192,30.3722565091999;114.14327515139,30.3760565098985;114.148975152438,30.3804565085774;114.155275150567,30.3856565099592;114.159775151157,30.3902565097635;114.164175151635,30.3960565100251;114.170675151788,30.4052565096336;114.172275151798,30.3995565085858;114.175875151371,30.3938565093366;114.179075151392,30.3904565099896;114.184675151427,30.3889565100925;114.190975151355,30.3926565097787;114.195375151832,30.398056509588;114.197975151174,30.4028565096184;114.201875151986,30.4054565098597;114.20647515179,30.4038565098496;114.20967515181,30.4016565100605;114.212075151825,30.3961565092388;114.213475151609,30.3924565095526;114.214875151393,30.3897565100976;114.217275151409,30.3876565104216;114.220975151994,30.3859565093991;114.225975151351,30.3868565104165;114.229675151937,30.3918565097736;114.229575151824,30.396556509691;114.229575151824,30.4004565096032;114.229675151937,30.4064565100908;114.230175151603,30.4100565096639;114.230875150595,30.4160565092523;114.2316751506,30.4197565098378;114.232675151731,30.42365650975;114.236075151977,30.4275565096623;114.239975151889,30.4280565093282;114.244275151355,30.4265565094311;114.24797515194,30.4240565093029;114.252075151179,30.4208565092827;114.254775152433,30.4179565096015;114.259475150551,30.4177565093755;114.263475150577,30.4200565092776;114.265275151712,30.422856509745;114.269475151964,30.4276565097753;114.271975151193,30.4332565098107;114.274375151208,30.4387565097331;114.27637515167,30.4415565093012;114.280375151695,30.4476565099019;114.283675151829,30.450556509583;114.287175151289,30.4503565093569;114.293775151555,30.4483565097939;114.29997515137,30.4449565104468;114.303475151729,30.4418565096403;114.306675151749,30.4395565097382;114.31147515178,30.43705650961;114.316775150577,30.4346565095948;114.321875151846,30.4323565096926;114.326675151876,30.4301565099036;114.329575151557,30.4285565098934;114.333575151582,30.4281565094412;114.337775151834,30.4290565095594;114.342275152424,30.4300565097905;114.345475152445,30.4316565098006;114.348875151792,30.4360565093788;114.351975151699,30.4395565097382;114.35487515138,30.4423565093063;114.35777515196,30.4448565094345;114.360875151868,30.4476565099019;114.364575151554,30.450656509696;114.366975151569,30.4529565095982;114.369275150572,30.4569565096235;114.369175151358,30.4605565100959;114.367875151687,30.4637565092169;114.368575151579,30.4679565085689;114.365875151225,30.4765565092978;114.367675150562,30.4811565100014;114.371275151933,30.4853565093536;114.376075151964,30.4870565085774;114.38137515166,30.4861565093586;114.388575151706,30.4813565093282;114.395275151186,30.476856509637;114.398475151206,30.4732565100639;114.406175151817,30.4730565098378;114.410975151847,30.4763565099711;114.414075151755,30.4814565094413;114.415875151991,30.4862565085723;114.418175151893,30.489756509831;114.42157515124,30.4929565098513;114.425275151825,30.4952565097534;114.432375151758,30.4976565097686;114.440375151809,30.4988565093265;114.445875151731,30.4989565094396;114.451775151206,30.4978565099947;114.456575151237,30.4964565093114;114.461675151606,30.4926565104115;114.463575151955,30.4887565095999;114.464975151739,30.4828565092253;114.46817515176,30.4780565100942;114.471175151554,30.4729565097247;114.476775151589,30.4689565096994;114.482675151964,30.4664565095712;114.487175151655,30.4651565099002;114.490875151341,30.464056509556;114.495675151372,30.463356509664;114.499875151623,30.4629565092118;114.504675151653,30.4655565085537;114.506975151555,30.4682565098074;114.509875151237,30.4733565092776;114.513575151822,30.476856509637;114.516175151164,30.4816565096673;114.517375151621,30.4864565096977;114.518975151631,30.4933565094041;114.520275151302,30.4961565098715;114.522275151765,30.5002565100099;114.527775151687,30.5113565099677;114.52977515125,30.517356509556;114.531575150587,30.5216565099204;114.532875151157,30.5253565096066;114.535475151399,30.532256509313;114.542675151444,30.5348565095543;114.549475151937,30.5364565095645;114.558475151319,30.5356565095594;114.56327515135,30.5344565100015;114.567075151149,30.5334565097703;114.57317515175,30.5318565097602;114.578175152006,30.5307565094159;114.585459491371,30.4949442462591;";
//		System.out.println(checkDotInPolygon(str, 114.213, 30.005));
		
		//lon=114.293, radius=33000, st=2014-10-01, et=2014-12-31, lat=30.619
//		double centerX = 114.293;
//		double centerY = 30.619;
//		int radius = 22000;
//		double px = 114.612;
//		double py = 30.684;
//		double[] rect = DotUtil.getAround(centerY, centerX, radius);
//		double ymin = rect[0];
//		double xmin = rect[1];
//		double ymax = rect[2];
//		double xmax = rect[3];
//		double r = (xmax-xmin)/2;
//		System.out.println((ymax-ymin)/2);
//		double fl = radius/r;
//		System.out.println("fl="+fl);
//		System.out.println("aaa=");
//		System.out.println("r="+r);
//		System.out.println("r="+radius/95776.3178);
//		boolean isIn = inCircle(centerX, centerY, r, px, py);
//		System.out.println("isIn="+isIn);
//		int radius = 22000;
//		double px = 114.612;
//		double py = 30.684;
//		Rect rect = DotUtils.getAround(py,px,radius);
//		double ymin = rect.getYmin();
//		double xmin = rect.getXmin();
//		double ymax = rect.getYmax();
//		double xmax = rect.getXmax();
//		System.out.println((ymax-ymin));
//		System.out.println((xmax-xmin));
		double d = dfmToLonlat("34°41′09.5″");
		System.out.println(d);
		String string = lonlatToDfm(d);
		System.out.println(string);
	}
	/**
	 * @method 检查所查点坐标是否在多边形内
	 * @param 多边形点序列[x1,y1;x2,y2;x3,y3] regPntStr
	 * @param 要判断的点X坐标  XDot
	 * @param 要判断的点Y坐标 YDot
	 * @return boolean 点在多边形里面返回为true,不在为false
	 */
	public static boolean checkDotInPolygon(String regPntStr, double XDot,
			double YDot) {
		boolean t_bCheckFlg = false;
		String[] strArr = regPntStr.split(";");
		int pntNum = strArr.length;
		double[] PQXarray = new double[pntNum];
		double[] PQYarray = new double[pntNum];
		for (int i = 0; i < pntNum; i++) {
			PQXarray[i] = Double.parseDouble(strArr[i].split(",")[0]);
			PQYarray[i] = Double.parseDouble(strArr[i].split(",")[1]);
		}
		int t_cout = 0;
		if ((PQXarray[PQXarray.length - 1] == XDot)
				&& (PQYarray[PQYarray.length - 1] == YDot))
			t_bCheckFlg = true;
		else {
			if (((PQYarray[PQYarray.length - 1] > YDot) && (PQYarray[0] < YDot))
					|| ((PQYarray[PQYarray.length - 1] < YDot) && (PQYarray[0] > YDot))) {
				double t_X = (PQXarray[0] * YDot
						+ PQXarray[PQXarray.length - 1] * PQYarray[0]
						- PQXarray[PQXarray.length - 1] * YDot - PQXarray[0]
						* PQYarray[PQYarray.length - 1])
						/ (PQYarray[0] - PQYarray[PQYarray.length - 1]);
				if (t_X == XDot)
					t_bCheckFlg = true;
				else if (t_X > XDot)
					t_cout++;
			}
		}
		if (!t_bCheckFlg) {
			for (int i = 0; i < (PQXarray.length - 1); i++) {
				if ((PQXarray[i] == XDot) && (PQYarray[i] == YDot)) {
					t_bCheckFlg = true;
					break;
				} else {
					if (((PQYarray[i] > YDot) && (PQYarray[i + 1] < YDot))
							|| ((PQYarray[i] < YDot) && (PQYarray[i + 1] > YDot))) {
						double t_X = (PQXarray[i] * YDot + PQXarray[i + 1]
								* PQYarray[i] - PQXarray[i + 1] * YDot - PQXarray[i]
								* PQYarray[i + 1])
								/ (PQYarray[i] - PQYarray[i + 1]);
						if (t_X == XDot) {
							t_bCheckFlg = true;
							break;
						} else if (t_X > XDot)
							t_cout++;
					}
				}
			}
		}
		if ((!t_bCheckFlg) && (t_cout % 2 == 1))
			t_bCheckFlg = true;
		return t_bCheckFlg;
	}
	public static boolean isPointInPolygon(double px,double py,ArrayList<Double> polygonXA,ArrayList<Double> polygonYA)
    {
        //log.info("method --> isPointInPolygon");
		boolean isInside = false;       
        double ESP = 1e-9;
        int count = 0;
        double linePoint1x;
        double linePoint1y;
        double linePoint2x=2.0037508342789E7;//180;//2.0037508342789E7;
        double linePoint2y;
 
        linePoint1x=px;
        linePoint1y=py;
        linePoint2y=py;
 
        for(int i=0;i<polygonXA.size()-1;i++)
        {
            double cx1 = polygonXA.get(i);
            double cy1 = polygonYA.get(i);
            double cx2 = polygonXA.get(i+1);
            double cy2 = polygonYA.get(i+1);
            if(isPointOnLine(px,py,cx1,cy1,cx2,cy2))
            {
                return true;
            }
            if(Math.abs(cy2-cy1) <= ESP)
            {
                continue;
            }
 
            if(isPointOnLine(cx1,cy1,linePoint1x,linePoint1y,linePoint2x,linePoint2y))
            {
                if(cy1>cy2) count++;
            }
            else if(isPointOnLine(cx2,cy2,linePoint1x,linePoint1y,linePoint2x,linePoint2y))
            {
                if(cy2>cy1) count++;
            }
            else if(isIntersect(cx1,cy1,cx2,cy2,linePoint1x,linePoint1y,linePoint2x,linePoint2y))
            {
                count++;
            }
        }
        if(count%2 == 1)
        {
            isInside = true;
        }
 
        return isInside;
    }
 
 
 
	public static double Multiply(double px0,double py0,double px1,double py1,double px2,double py2)
    {
        return ((px1-px0)*(py2-py0)-(px2-px0)*(py1-py0));                    
    }
 
 
 
	public static boolean isPointOnLine(double px0,double py0,double px1,double py1,double px2,double py2)
    {
        boolean flag = false;       
        double ESP = 1e-9;
        if((Math.abs(Multiply(px0,py0,px1,py1,px2,py2)) < ESP)&&((px0-px1)*(px0-px2)<=0)&&((py0-py1)*(py0-py2)<=0))
        {
            flag = true;
        }
        return flag;
    }
 
 
 
	public static boolean isIntersect(double px1,double py1,double px2,double py2,double px3,double py3,double px4,double py4)
    {
        boolean flag = false;
        double d = (px2-px1)*(py4-py3) - (py2-py1)*(px4-px3);
        if(d!=0)
        {
            double r = ((py1-py3)*(px4-px3)-(px1-px3)*(py4-py3))/d;
            double s = ((py1-py3)*(px2-px1)-(px1-px3)*(py2-py1))/d;
            if((r>=0) && (r <= 1) && (s >=0) && (s<=1))
            {
                flag = true;
            }
        }
        return flag;
    }
	
	/**
	 * 判断一个点是否在圆内
	 * @author 雷志强
	 * @param centerX 圆心坐标X
	 * @param centerY 圆心坐标Y
	 * @param radius 圆半径
	 * @param px 判断点的X坐标
	 * @param py 判断点的Y坐标
	 * @return 在里面返回true，不在里面返回false
	 */
	public static boolean inCircle(double centerX,double centerY,double radius,double px,double py){
		double a = Math.sqrt(Math.pow(px-centerX,2)+Math.pow(py-centerY,2));
		if(a>radius){
			return false;
		}else {
			return true;
		}
	}
	public static boolean inCircle(String circlePntStr,double radius,double px,double py){
		String[] pntArr = circlePntStr.split(";");
		int pntNum = pntArr.length;
		boolean flag = false;
		for(int i=0;i<pntNum;i++){
			double cx = Double.parseDouble(pntArr[i].split(",")[0]);
			double cy = Double.parseDouble(pntArr[i].split(",")[1]);
			flag = inCircle(cx, cy, radius, px, py);
			if(flag){
				break;
			}
		}
		return flag;
	}
	/**标准度分秒经纬度字符串转数字经纬度
	 * @author LZQ
	 * @param coordString 度分秒经纬度字符串
	 * @return 数字经纬度
	 */
	public static double PointCoordChange(String coordString){
		double d = 0.0;
		//log.info("coordString --> "+coordString);
		if(coordString.length()>0){
			String str = coordString.substring(0, coordString.length()-1);
			//log.info("DotStr --> "+str);
			String type = coordString.substring(coordString.length()-1,coordString.length());
			//log.info("DotType --> "+type);
			String degree = str.substring(0, str.length()-4);
			//log.info("DotDegree --> "+degree);
			String minute = str.substring(str.length()-4, str.length()-2);
			//log.info("DotMinute --> "+minute);
			String second = str.substring(str.length()-2, str.length());
			//log.info("DotSecond --> "+second);
			double d1 = Double.parseDouble(degree);
			//log.info("DotDegree --> "+d1);
			double d2 = (Integer.parseInt(minute)*60+Integer.parseInt(second))/3600.0000;
			//log.info("DotPoint --> "+d2);
			d = d1+d2;
			//log.info("d --> "+d);
			DecimalFormat df = new DecimalFormat("#0.000000");
			String s = df.format(d);
			//log.info("s --> "+s);
			d = Double.parseDouble(s);
			if(type.equals("E")||type.equals("N")){
				
			}else{
				d = -d;
			}
		}
		//log.info("d --> "+d);
		return d;
	}
	/**
	 * 功能描述：度分秒字符串转数值经纬度值
	 * 创建作者：雷志强
	 * 创建时间：2017年8月6日 下午7:44:02
	 * @param dfmstr 度分秒经纬度值，例如：34°41′09.5″
	 * @return double 34.68597222222222
	 */
	public static double dfmToLonlat(String dfmstr){
		double d = 0.0;
		//System.out.println(dfmstr);
		if(dfmstr!=null&&!dfmstr.equals("")){
			int dindex = dfmstr.indexOf("°");
			int findex = dfmstr.indexOf("′");
			int mindex = dfmstr.indexOf("″");
			if(dindex!=-1&&findex!=-1&&mindex!=-1){
				String dstr = dfmstr.substring(0,dindex);
				String fstr = dfmstr.substring(dindex+1,findex);
				String mstr = dfmstr.substring(findex+1,mindex);
				//System.out.println(dstr+","+fstr+","+mstr);
				double dd = Double.parseDouble(dstr);
				double fd = Double.parseDouble(fstr);
				double md = Double.parseDouble(mstr);
				//System.out.println(dd+","+fd+","+md);
				d = dd + (fd*60+md)/3600;
			}else{
				System.out.println("传入参数不是标准的度分秒格式字符串！");
			}
		}else{
			System.out.println("度分秒经纬度参数值为空！");
		}
		return d;
	}
	/**
	 * 功能描述：数值经纬度转度分秒经纬度字符串
	 * 创建作者：雷志强
	 * 创建时间：2017年8月6日 下午7:57:32
	 * @param lonlat 34.68597222222222
	 * @return String 34°41′09.5″
	 */
	public static String lonlatToDfm(double lonlat){
		String lonlatstr = "";
		System.out.println(lonlat);
		if(lonlat>=-180&&lonlat<=180){
			double degree = Math.floor(lonlat);
			double tmp = (lonlat - degree)*3600;
			double minute = Math.floor(tmp/60);
			double second = tmp - minute*60;
			System.out.println(degree+","+minute+","+second);
			lonlatstr = new DecimalFormat("#0").format(degree)+"°";
			if(minute<10){
				lonlatstr += "0"+new DecimalFormat("#0").format(minute)+"′";
			}else{
				lonlatstr += new DecimalFormat("#0").format(minute)+"′";
			}
			if(second<10){
				lonlatstr += "0"+new DecimalFormat("#0.0").format(second)+"″";
			}else{
				lonlatstr += new DecimalFormat("#0.0").format(second)+"″";
			}
		}else{
			System.out.println("输入的数值超出经纬度范围[-180,180]！");
		}
		return lonlatstr;
	}
	
	/**
	 * 转换科学计数为一般的，并取小数点之前的数。
	 * 
	 * @param num
	 *            数字串
	 * @return
	 */
	static String parseSciNum(String num) {
		String number = num;
		if (number != null && number != "") {
			if (number.contains("E")) {
				int index = Integer.valueOf(number.substring(number.length() - 1));
				number = number.substring(number.indexOf(".") + 1, index + 2);
				number = num.substring(0,1) + number;
			} else if (number.contains(".")) {
				number = number.substring(0, number.indexOf("."));
			}
		}
		return number;
	}
	static double parseSciNum(double num) {
		double d = 0;
		String number = String.valueOf(num);
		String numStr = String.valueOf(num);
		if (number != null && number != "") {
			if (number.contains("E")) {
				int index = Integer.valueOf(number.substring(number.length() - 1));
				number = number.substring(number.indexOf(".") + 1, index + 2);
				number = numStr.substring(0,1) + number;
			} else if (number.contains(".")) {
				number = number.substring(0, number.indexOf("."));
			}
		}
		d = Double.parseDouble(number);
		return d;
	}
	/**
	 * WEB墨卡托转经纬度
	 * @param px 墨卡托投影X坐标
	 * @param py 墨卡托投影Y坐标
	 * @return 经纬度
	 */
	public static double[] Mercator2lonLat(double px,double py){
	    double[] xy = new double[2];
	    double x = px/20037508.342789*180;//20037508.342789
	    double y = py/20037508.342789*180;//20037508.342789
	    double M_PI = Math.PI;
	    y= 180/M_PI*(2*Math.atan(Math.exp(y*M_PI/180))-M_PI/2);
	    xy[0] = x;
	    xy[1] = y;
	    return xy;
	}
	
	/**
	 * 经纬度转WEB墨卡托
	 * @param px 经度
	 * @param py 纬度
	 * @return WEB墨卡托XY坐标
	 */
	public static double[] lonLat2Mercator(double px,double py){
		double[] xy = new double[2];
	    double x = px*20037508.342789/180;
	    double M_PI = Math.PI;
	    double y = Math.log(Math.tan((90+py)*M_PI/360))/(M_PI/180);
	    y = y *20037508.342789/180;
	    xy[0] = x;
	    xy[1] = y;
	    return xy ;
	}
	
	/**GIS --> 共用功能 --逻辑坐标转屏幕坐标
	 * @author 雷志强
	 * @param x 点的X坐标
	 * @param y 点的Y坐标
	 * @param xmin 地图范围最小X坐标
	 * @param ymin 地图范围最小Y坐标
	 * @param xmax 地图范围最大X坐标
	 * @param ymax 地图范围最大Y坐标
	 * @param width 地图的宽度
	 * @param height 地图的高度
	 * @return
	 */
	public static int[] logicToScreen(double x,double y,double xmin,double ymin,double xmax,double ymax, int width,int height){		
		int[] xy = new int[2];		
		double logicX = xmax - xmin;
		double logicY = ymax - ymin;
		double px = (x-xmin)/logicX*width;
		double py = (ymax-y)/logicY*height;
		DecimalFormat df = new DecimalFormat("#0");
		xy[0] = Integer.parseInt(df.format(px));
		xy[1] = Integer.parseInt(df.format(py));
		return xy;
	}
	
	/**
	 * 根据经纬度和半径计算经纬度范围
	 * @param lat 纬度
	 * @param lon 经度
	 * @param raidus 半径
	 * @return minLat,minLng,maxLat,maxLng 
	 */
	public static JSONObject getAround(double lat,double lon,int raidus){
		JSONObject rect = new JSONObject();
        Double latitude = lat;  
        Double longitude = lon;
        
        Double degree = (24901*1609)/360.0;
        double raidusMile = raidus;
        
        Double dpmLat = 1/degree;
        Double radiusLat = dpmLat*raidusMile;
        Double minLat = latitude - radiusLat;
        Double maxLat = latitude + radiusLat;
        Double mpdLng = degree*Math.cos(latitude * (Math.PI/180));
        Double dpmLng = 1 / mpdLng;
        Double radiusLng = dpmLng*raidusMile;
        Double minLng = longitude - radiusLng;
        Double maxLng = longitude + radiusLng;
        rect.put("xmin", minLng);
        rect.put("ymin", minLat);
        rect.put("xmax", maxLng);
        rect.put("ymax", maxLat);
        return rect;
    }
	//获取多边形区域外包矩形范围
	public static JSONObject getPolygonRect(String regPntStr){
		JSONObject rect = new JSONObject();
		String[] strArr = regPntStr.split(";");
		int pntNum = strArr.length;
		double xmin = 0;
		double ymin = 0;
		double xmax = 0;
		double ymax = 0;
		double px = 0;
		double py = 0;
		for (int i = 0; i < pntNum; i++) {
			px = Double.parseDouble(strArr[i].split(",")[0]);
			py = Double.parseDouble(strArr[i].split(",")[1]);
			if(i==0){
				xmin = xmax = px;
				ymin = ymax = py;
			}
			if(px<=xmin){
				xmin = px;
			}else if(px>=xmax){
				xmax = px;
			}
			if(py<=ymin){
				ymin = py;
			}else if(py>=ymax){
				ymax = py;
			}
		}
		rect.put("xmin", xmin);
		rect.put("ymin", ymin);
		rect.put("xmax", xmax);
		rect.put("ymax", ymax);
		return rect;
	}
	/**
	 * 功能描述：获取坐标点串的外包矩形范围<br>
	 * 创建作者：雷志强<br>
	 * 创建时间：2016-4-21 下午02:19:04<br>
	 * @param points  x,y_x,y_x,y
	 * @return double[]
	 */
	public static double[] getPointsRect(String points){
		double[] rect = new double[4];
		double xmin = 0;
		double ymin = 0;
		double xmax = 0;
		double ymax = 0;
		double px = 0;
		double py = 0;
		String[] pntArr = points.split("_");
		int pntCount = pntArr.length;
		String pntStr = null;
		String[] tmpArr = null;
		for(int i=0;i<pntCount;i++){
			pntStr = pntArr[i];
			tmpArr = pntStr.split(",");
			py = Double.parseDouble(tmpArr[0]);
			px = Double.parseDouble(tmpArr[1]);
			if(i==0){
				xmin = xmax = px;
				ymin = ymax = py;
			}
			if(px<=xmin){
				xmin = px;
			}else if(px>=xmax){
				xmax = px;
			}
			if(py<=ymin){
				ymin = py;
			}else if(py>=ymax){
				ymax = py;
			}
		}
		rect[0]=xmin;
		rect[1]=ymin;
		rect[2]=xmax;
		rect[3]=ymax;
		System.out.println(xmin+","+ymin+","+xmax+","+ymax);
		return rect;
	}
}


class Rect {
	private double xmin;
	private double ymin;
	private double xmax;
	private double ymax;
	
	public Rect(){
		
	}
	
	public Rect(double xMin,double yMin,double xMax,double yMax){
		this.xmin = xMin;
		this.ymin = yMin;
		this.xmax = xMax;
		this.ymax = yMax;
	}
	
	public double getXmin() {
		return xmin;
	}
	public void setXmin(double xmin) {
		this.xmin = xmin;
	}
	public double getYmin() {
		return ymin;
	}
	public void setYmin(double ymin) {
		this.ymin = ymin;
	}
	public double getXmax() {
		return xmax;
	}
	public void setXmax(double xmax) {
		this.xmax = xmax;
	}
	public double getYmax() {
		return ymax;
	}
	public void setYmax(double ymax) {
		this.ymax = ymax;
	}
	
	public void print(){
		StringBuffer sb = new StringBuffer();
		sb.append("xmin="+xmin);
		sb.append(",ymin="+ymin);
		sb.append(",xmax="+xmax);
		sb.append(",ymax="+ymax);
		System.out.println(sb.toString());
	}
}